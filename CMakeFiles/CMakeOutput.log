The system is: Windows - 10.0.19044 - AMD64
Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
Compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.33.31629/bin/HostX64/x64/cl.exe 
Build flags: 
Id flags:  

The output was:
0
Microsoft (R) C/C++ wersja kompilatora optymalizującego 19.33.31630 dla x64
Copyright (C) Microsoft Corporation. Wszystkie prawa zastrzeżone.

CMakeCXXCompilerId.cpp
Microsoft (R) Incremental Linker Version 14.33.31630.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:CMakeCXXCompilerId.exe 
CMakeCXXCompilerId.obj 


Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.exe"

Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.obj"

The CXX compiler identification is MSVC, found in "C:/Users/kubac/Documents/build-KolekcjaPlytMuzycznych-Desktop_Qt_6_4_2_MSVC2019_64bit-Release/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.exe"

Detecting CXX compiler ABI info compiled with the following output:
Change Dir: C:/Users/kubac/Documents/build-KolekcjaPlytMuzycznych-Desktop_Qt_6_4_2_MSVC2019_64bit-Release/CMakeFiles/CMakeTmp

Run Build Command(s):C:/PROGRA~1/MIB055~1/2022/COMMUN~1/Common7/IDE/COMMON~1/MICROS~1/CMake/Ninja/ninja.exe cmTC_42821 && [1/2] Building CXX object CMakeFiles\cmTC_42821.dir\CMakeCXXCompilerABI.cpp.obj
[2/2] Linking CXX executable cmTC_42821.exe



Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: C:/Users/kubac/Documents/build-KolekcjaPlytMuzycznych-Desktop_Qt_6_4_2_MSVC2019_64bit-Release/CMakeFiles/CMakeTmp

Run Build Command(s):C:/PROGRA~1/MIB055~1/2022/COMMUN~1/Common7/IDE/COMMON~1/MICROS~1/CMake/Ninja/ninja.exe cmTC_28e7e && [1/2] Building CXX object CMakeFiles\cmTC_28e7e.dir\src.cxx.obj
[2/2] Linking CXX executable cmTC_28e7e.exe


Source file was:
#include <atomic>
#include <cstdint>

int main(int, char **)
{
    volatile std::atomic<char>    size_1;
    volatile std::atomic<short>   size_2;
    volatile std::atomic<int>     size_4;
    volatile std::atomic<int64_t> size_8;

    ++size_1;
    ++size_2;
    ++size_4;
    ++size_8;

    (void)size_1.load(std::memory_order_relaxed);
    (void)size_2.load(std::memory_order_relaxed);
    (void)size_4.load(std::memory_order_relaxed);
    (void)size_8.load(std::memory_order_relaxed);

    return 0;
}
